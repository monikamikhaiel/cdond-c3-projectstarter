# add the code 
#  cd and npm run 
# install nodejs and npm 
# - name: "Add nodejs apt key"
#   apt_key:
#     url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
#     state: present

# - name: "Add nodejs 13.x ppa for apt repo"
#   apt_repository:
#     repo: deb https://deb.nodesource.com/node_13.x bionic main
#     update_cache: yes

- name: "untar the dependencies"
  unarchive:
    src: dependencies.tar
    dest: /home/ubuntu/
- name: "download nodejs 13.8"
  become: true
  shell: |
         curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -

- name: "Install nodejs"
  apt:
    update_cache: yes
    name: nodejs
    state: present

#  install dependencies 
- name: "install dependencies"
  ansible.builtin.command: npm install 
  args:
    chdir: /home/ubuntu/
# install pm2 
- name: "Install NPM-distributed command-line tools"
  npm:
    global: yes
    name: "pm2"
# run it with pm2   
# install pm2 
- name: "run code"
  shell: | 
          pm2 start dist/main.js

  # ansible.builtin.command: pm2 start dist/main.js
  # # ansible.builtin.command: cd /home/ubuntu/ && pm2 start dist/main.js
  # #  && doesn't exists in the command 
  # # https://linuxhint.com/shell-vs-command-modules-ansible/#:~:text=The%20shell%20module%20executes%20commands,executes%20on%20all%20selected%20nodes.

  args:
    chdir: /home/ubuntu
  environment:
    TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION')}}"
    TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE')}}"
    TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES')}}"
    TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST')}}"
    TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS')}}"
    TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR')}}"
    TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD')}}"
    TYPEORM_PORT: "{{ lookup('env', 'TYPEORM_PORT')}}"
    TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME')}}"   
- name: "synchronize process "
  shell: | 
          pm2 save 
  args:
    chdir: /home/ubuntu    
#   register: pm2_logs
# - name: copy the output to a local file
#   copy:
#     content: "{{ pm2_logs.stdout }}"
#     dest: "/tmp/hello.txt"
#   delegate_to: localhost    


