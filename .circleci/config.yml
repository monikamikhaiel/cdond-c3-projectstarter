version: 2.1

commands:
   install-dependencies:
     description: Install aws cli and ansible 
     steps:
      - run:
          name: aws
          command: |
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install
      - run:
          name: ansible
          command: |
                   sudo apt update
                   sudo apt install software-properties-common
                   sudo add-apt-repository --yes --update ppa:ansible/ansible
                   sudo apt install ansible
   destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_ID:
        type: string 
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name "ApplicationInfrastructureFRONT${CIRCLE_WORKFLOW_ID:0:5}"  
             aws cloudformation delete-stack --stack-name "ApplicationInfrastructureBACK${CIRCLE_WORKFLOW_ID:0:5}"
             aws s3 rm s3://udapeople-kk1j287dhjppmz55 --recursive
   revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      # parameters:
      # Add parameter here     
      steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
            #  Add revert code here. You can find this in the Getting Started section.
              # exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache: # cache --> hierarchy of files under a key. 
          keys: [frontend-dependencies]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies # ta2riban dah zay elcookie name 

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end build
          command: |
            cd backend          
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache: # cache --> hierarchy of files under a key. 
          keys: [frontend-dependencies] # from the previous job
      - run:
          name: front-end test
          command: |
            cd frontend
            npm run test # same as npm test in order to run the scriptin package.json scripts 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies # ta2riban dah zay elcookie name 
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies
 # scan vulnerability
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache: # cache --> hierarchy of files under a key. 
          keys: [frontend-dependencies] # from the previous job
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies # ta2riban dah zay elcookie name 
                
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install # check for unsecure packages 
            npm audit fix --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies
  # run-migration:        
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-dependencies]
  #     - run:
  #         name:  run-migration
  #         command: |
  #           cd backend
  #           npm install 
  #           npm run migrations
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-dependencies
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=monika-infrastructure-deployment\
               --stack-name "ApplicationInfrastructureBACK${CIRCLE_WORKFLOW_ID:0:5}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=monika-infrastructure-deployment \
              --stack-name "ApplicationInfrastructureFRONT${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                    BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                    echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
                    cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment      
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["ea:49:89:e6:c1:92:83:80:bc:12:1c:b8:5d:35:7f:68"]
      # attach workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Configure server
          command: |
               cat .circleci/ansible/inventory.txt
               ansible-playbook -i .circleci/ansible/inventory.txt  .circleci/ansible/configure-server.yml 
           
      - run:
          name: Install dependencies
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml 
#             exit 1

      # - destroy-environment      

#             exit 1
#       # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-dependencies
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name:  run-migration
          command: |
            cd backend
            npm install 
            npm run migrations > migrations.log
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure   
      - destroy-environment   
      - revert-migrations

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
# #   deploy-backend:
# #     docker:
# #       # Docker image here that supports Ansible
# #     steps:
# #       # Checkout code from git
# #       # Add ssh keys with fingerprint
# #       # attach workspace
# #       - run:
# #           name: Install dependencies
# #           command: |
# #             # your code here
# #       - run:
# #           name: Deploy backend
# #           command: |
# #             # your code here
# #       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# #   cloudfront-update:
# #     docker:
# #       # Docker image here that supports AWS CLI
# #     steps:
# #       # Checkout code from git
# #       - run:
# #           name: Install dependencies
# #           command: |
# #             # your code here
# #       - run:
# #           name: Update cloudfront distribution
# #           command: |
# #             # your code here
# #       # Here's where you will add some code to rollback on failure  

# # cleanup:
# #     docker:
# #             - image: cimg/node:13.8.0
# #     steps:
# #       # Checkout code from git
# #       - run:
# #           name: Get old stack workflow id
# #           command: |
# #             # your code here
# #             export OldWorkflowID="the id here"
# #             export STACKS=[] #put the list of stacks here
# #       - run:
# #           name: Remove old stacks and files
# #           command: |
# #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
# #             then
# #               # your code here
# #             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - run-migration:
      #     requires: [scan-backend]          
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]